package Task_3_philosophers;

public class Table {
	private final int nbrOfChopsticks;
	private final boolean[] chopstick; // true if chopstick[i] is available

	public Table(int nbrOfSticks) {
		nbrOfChopsticks = nbrOfSticks;
		chopstick = new boolean[nbrOfChopsticks];
		for (int i = 0; i < nbrOfChopsticks; i++) {
			chopstick[i] = true;
		}
	}

	public synchronized void getLeftChopstick(int n) {
		while(!chopstick[n]) { //Wait if chopstick[n] = leftChopStick is false/unavailable.
			threadWait();

		}
		chopstick[n] = false;
	}

	public synchronized void getRightChopstick(int n) {
		int pos = n + 1;
		if (pos == nbrOfChopsticks){
			pos = 0;
		}

		while(!chopstick[pos]){//Wait if chopstick[pos] = rightChopStick is false/unavailable.
			threadWait();
		}

		chopstick[pos] = false;
	}

	public synchronized void releaseLeftChopstick(int n) {
		chopstick[n] = true;
	}

	public synchronized void releaseRightChopstick(int n) {
		int pos = n + 1;
		if (pos == nbrOfChopsticks){
			pos = 0;

		}
		chopstick[pos] = true;
	}


	public synchronized void threadWait(){
		try {
			wait();
		} catch (InterruptedException e) {
			e.printStackTrace();
			threadWait();
		}
	}
}
