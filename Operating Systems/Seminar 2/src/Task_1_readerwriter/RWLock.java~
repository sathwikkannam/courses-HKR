package Task_1_readerwriter;


/**
 * Requirements:
 *      A reader should wait only if a writer has locked the data.
 *      Multiple readers can access the same data simultaneously.
 *      A writer must wait if readers or writers are active.
 */


public class RWLock {
    private boolean isReading;
    private boolean isWriting;


    public RWLock(){
        this.isWriting = false;
        this.isReading = false;
    }


    //Only one thread can access any of the functions at a time.
    public void acquireRead() {
        while(isWriting){
            awaitThread(); //Wait
        }

        isReading = true;

    }

    public synchronized void acquireWrite(){
        while(isWriting || isReading){
            awaitThread();
        }

        isWriting = true;
    }

    public synchronized void releaseRead(){
        notifyAll();
        isReading = false;

    }

    public synchronized void releaseWrite() {
        notifyAll(); //Notify all threads.
        isWriting = false;
    }


    private synchronized void awaitThread(){
        try {
            wait();
        }catch (InterruptedException e){
            e.printStackTrace();
            awaitThread();
        }

    }

}
